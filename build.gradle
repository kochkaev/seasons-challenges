plugins {
    id 'fabric-loom' version '1.10.1'
    id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

ext {
    pass = findProperty('pass') ?: ''
}

base {
    archivesName = project.archives_base_name
}

loom {
    splitEnvironmentSourceSets()

    mods {
        "seasons-challenges" {
            sourceSet sourceSets.main
            sourceSet sourceSets.client
        }
    }
}

repositories {
    // Add repositories to retrieve artifacts from in here.
    // You should only use this when depending on other mods because
    // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
    // See https://docs.gradle.org/current/userguide/declaring_repositories.html
    // for more information about repositories.
//    flatDir {
//        dirs 'D:/GitHub/seasons-api/build/libs'
////        dirs 'D:/GitHub/seasons-api/src/main/java'
//    }
//    maven {
//        url "https://raw.github.com/kochkaev/seasons-api/maven/"
//    }
//    mavenLocal()
//    maven {
//        url: "file:///D:/GitHub/seasons-api/build/libs"
////        url: "file:///D:/GitHub/seasons-api/src/main/java/"
//    }
    maven {
        name = "Nucleoid"
        url = "https://maven.nucleoid.xyz/"
    }

    maven { url = 'https://maven.shedaniel.me/' }
    maven { url = "https://maven.terraformersmc.com/releases/" }

    maven {
        name = "GitHubPackages"
        url = 'https://maven.pkg.github.com/kochkaev/seasons-api'
        credentials {
            username = "kochkaev"
//            password = ""
//            password = System.getenv('ORG_GRADLE_PROJECT_pass')
            password = pass
        }
    }
    exclusiveContent {
        forRepository {
            maven {
                name = "Modrinth"
                url = "https://api.modrinth.com/maven"
            }
        }
        filter {
            includeGroup "maven.modrinth"
        }
    }
    mavenCentral()
    mavenLocal()
}

dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"


    modImplementation "eu.pb4:placeholder-api:${project.placeholderapi_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
//    modImplementation "ru.kochkaev:seasons-api:${project.seasons_api_version}"
    modImplementation "maven.modrinth:seasons-api:${project.seasons_api_version}"

    modImplementation("com.terraformersmc:modmenu:${project.modmenu_version}")
    modApi("me.shedaniel.cloth:cloth-config-fabric:${clothconfig_version}") {
        exclude(group: 'net.fabricmc.fabric-api')
    }

    modImplementation("net.kyori:adventure-api:${project.property("adventure_version")}")
    modImplementation("net.kyori:adventure-text-minimessage:${project.property("adventure_version")}")
    modImplementation("net.kyori:adventure-text-serializer-gson:${project.property("adventure_version")}") {
        exclude(module: "gson")
    }
    modImplementation("net.kyori:adventure-text-serializer-json:${project.property("adventure_version")}") {
        exclude(module: "gson")
    }
    modImplementation("net.kyori:examination-api:1.3.0")
    modImplementation("net.kyori:examination-string:1.3.0")
    modImplementation("net.kyori:option:1.0.0")
    modImplementation("net.kyori:adventure-key:${project.property("adventure_version")}")

}

processResources {
    inputs.property "version", project.version
    inputs.property "minecraft_version", project.minecraft_version
    inputs.property "loader_version", project.loader_version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version,
                "minecraft_version": project.minecraft_version,
                "loader_version": project.loader_version
    }
}

def targetJavaVersion = 21
tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release.set(targetJavaVersion)
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

// configure the maven publication
publishing {
    publications {
        create("mavenJava", MavenPublication) {
            artifactId = project.archives_base_name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
    }
}
